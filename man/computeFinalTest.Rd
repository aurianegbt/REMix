% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/computeFinalTest.R
\name{computeFinalTest}
\alias{computeFinalTest}
\title{Compute final estimation}
\usage{
computeFinalTest(
  remix.output,
  dynFUN,
  y,
  ObsModel.transfo,
  final.project = NULL,
  pop.set = NULL,
  prune = NULL,
  n = NULL,
  parallel = TRUE,
  ncores = NULL,
  print = TRUE,
  digits = 3,
  trueValue = NULL,
  test = TRUE,
  p.max = 0.05
)
}
\arguments{
\item{remix.output}{a \link{\code{remix}} outputs. It's important that the \code{project} path of this outputs is still existing.}

\item{final.project}{directory of the final Monolix project (default add "_upd" to the Monolix project).}

\item{pop.set}{population parameters setting for final estimation (see \code{\link{setPopulationParameterEstimationSettings}}).}

\item{print}{logical, if the results and algotihm steps should be displayed in the console (default to TRUE).}

\item{digits}{number of digits to print (default to 3).}

\item{trueValue}{-for simulation purposes- named vector of true value for parameters.}

\item{test}{if Wald test should be computed at the end of the iteration.}

\item{p.max}{maximum value to each for wald test p.value (default 0.05).}
}
\value{
a remix object on which final SAEM and test, if \code{test} is \code{TRUE}, have been computed.
}
\description{
Computes a final saem and wald test if `test` on the final model found by remix algorithm.
}
\examples{
\dontrun{
project <- getMLXdir()

ObsModel.transfo = list(S=list(AB=log10),
                        linkS="yAB",
                        R=rep(list(S=function(x){x}),5),
                        linkR = paste0("yG",1:5))

alpha=list(alpha0=NULL,
           alpha1=setNames(paste0("alpha_1",1:5),paste0("yG",1:5)))

y = c(S=5,AB=1000)

res = cv.remix(project = project,
               dynFUN = dynFUN_demo,
               y = y,
               ObsModel.transfo = ObsModel.transfo,
               alpha = alpha,
               selfInit = TRUE,
               eps1=10**(-2),
               ncores=8,
               nlambda=8,
               eps2=1)

res_with_test = computeFinalTest(retrieveBest(res0,criterion=BICc),
                                 dynFUN_demo,
                                 y,
                                 ObsModel.transfo)
}
}
